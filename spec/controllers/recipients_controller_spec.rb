require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RecipientsController do

  # This should return the minimal set of attributes required to create a valid
  # Recipient. As you add validations to Recipient, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString", "email" => "email@domain.ca" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipientsController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  context "With authorization" do
    let!(:user) { FactoryGirl.build_stubbed(:user) }

    let(:valid_session) { {"user_id" => user.id} }

    before do
      allow(User).to receive(:find_by).with(id: user.id) { user }
    end

    describe "GET index" do
      it "assigns all recipients as @recipients" do
        recipient = Recipient.create! valid_attributes
        get :index, {}, valid_session
        expect(assigns(:recipients)).to eq([recipient])
      end
    end

    describe "GET show" do
      it "assigns the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        get :show, {:id => recipient.to_param}, valid_session
        expect(assigns(:recipient)).to eq(recipient)
      end
    end

    describe "GET new" do
      it "assigns a new recipient as @recipient" do
        get :new, {}, valid_session
        expect(assigns(:recipient)).to be_a_new(Recipient)
      end
    end

    describe "GET edit" do
      it "assigns the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        get :edit, {:id => recipient.to_param}, valid_session
        expect(assigns(:recipient)).to eq(recipient)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Recipient" do
          expect {
            post :create, {:recipient => valid_attributes}, valid_session
          }.to change(Recipient, :count).by(1)
        end

        it "assigns a newly created recipient as @recipient" do
          post :create, {:recipient => valid_attributes}, valid_session
          expect(assigns(:recipient)).to be_a(Recipient)
          expect(assigns(:recipient)).to be_persisted
        end

        it "redirects to the created recipient" do
          post :create, {:recipient => valid_attributes}, valid_session
          expect(response).to redirect_to(Recipient.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved recipient as @recipient" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          post :create, {:recipient => { "name" => "invalid value" }}, valid_session
          expect(assigns(:recipient)).to be_a_new(Recipient)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          post :create, {:recipient => { "name" => "invalid value" }}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested recipient" do
          recipient = Recipient.create! valid_attributes
          # Assuming there are no other recipients in the database, this
          # specifies that the Recipient created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          expect_any_instance_of(Recipient).to receive(:update).with({ "name" => "MyString" })
          put :update, {:id => recipient.to_param, :recipient => { "name" => "MyString" }}, valid_session
        end

        it "assigns the requested recipient as @recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, {:id => recipient.to_param, :recipient => valid_attributes}, valid_session
          expect(assigns(:recipient)).to eq(recipient)
        end

        it "redirects to the recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, {:id => recipient.to_param, :recipient => valid_attributes}, valid_session
          expect(response).to redirect_to(recipient)
        end
      end

      describe "with invalid params" do
        it "assigns the recipient as @recipient" do
          recipient = Recipient.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          put :update, {:id => recipient.to_param, :recipient => { "name" => "invalid value" }}, valid_session
          expect(assigns(:recipient)).to eq(recipient)
        end

        it "re-renders the 'edit' template" do
          recipient = Recipient.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          put :update, {:id => recipient.to_param, :recipient => { "name" => "invalid value" }}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested recipient" do
        recipient = Recipient.create! valid_attributes
        expect {
          delete :destroy, {:id => recipient.to_param}, valid_session
        }.to change(Recipient, :count).by(-1)
      end

      it "redirects to the recipients list" do
        recipient = Recipient.create! valid_attributes
        delete :destroy, {:id => recipient.to_param}, valid_session
        expect(response).to redirect_to(recipients_url)
      end
    end
  end


  context "Without authorization" do
    describe "GET index" do
      it "cannot assign all recipients as @recipients" do
        recipient = Recipient.create! valid_attributes
        get :index, {}, valid_session
        expect(assigns(:recipients)).to eq(nil)
      end
    end

    describe "GET show" do
      it "cannot assign the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        get :show, {:id => recipient.to_param}, valid_session
        expect(assigns(:recipient)).to eq(nil)
      end
    end

    describe "GET new" do
      it "cannot assign a new recipient as @recipient" do
        get :new, {}, valid_session
        expect(assigns(:recipient)).not_to be_a_new(Recipient)
      end
    end

    describe "GET edit" do
      it "cannot assign the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        get :edit, {:id => recipient.to_param}, valid_session
        expect(assigns(:recipient)).to eq(nil)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "cannot create a new Recipient" do
          expect {
            post :create, {:recipient => valid_attributes}, valid_session
          }.to change(Recipient, :count).by(0)
        end

        it "cannot assign a newly created recipient as @recipient" do
          post :create, {:recipient => valid_attributes}, valid_session
          expect(assigns(:recipient)).not_to be_a(Recipient)
          #expect(assigns(:recipient)).to be_persisted
        end

        it "cannot redirect to the created recipient" do
          post :create, {:recipient => valid_attributes}, valid_session
          expect(response).to redirect_to(login_url)
        end
      end

      describe "with invalid params" do
        it "cannot assign a newly created but unsaved recipient as @recipient" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          post :create, {:recipient => { "name" => "invalid value" }}, valid_session
          expect(assigns(:recipient)).not_to be_a_new(Recipient)
        end

        it "cannot re-render the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          post :create, {:recipient => { "name" => "invalid value" }}, valid_session
          expect(response).to redirect_to(login_url)
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "cannot update the requested recipient" do
          recipient = Recipient.create! valid_attributes
          # Assuming there are no other recipients in the database, this
          # specifies that the Recipient created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          expect_any_instance_of(Recipient).not_to receive(:update).with({ "name" => "MyString" })
          put :update, {:id => recipient.to_param, :recipient => { "name" => "MyString" }}, valid_session
        end

        it "cannot assign the requested recipient as @recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, {:id => recipient.to_param, :recipient => valid_attributes}, valid_session
          expect(assigns(:recipient)).to eq(nil)
        end

        it "cannot redirect to the recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, {:id => recipient.to_param, :recipient => valid_attributes}, valid_session
          expect(response).to redirect_to(login_url)
        end
      end

      describe "with invalid params" do
        it "cannot assign the recipient as @recipient" do
          recipient = Recipient.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          put :update, {:id => recipient.to_param, :recipient => { "name" => "invalid value" }}, valid_session
          expect(assigns(:recipient)).to eq(nil)
        end

        it "cannot re-render the 'edit' template" do
          recipient = Recipient.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Recipient).to receive(:save).and_return(false)
          put :update, {:id => recipient.to_param, :recipient => { "name" => "invalid value" }}, valid_session
          expect(response).to redirect_to(login_url)
        end
      end
    end

    describe "DELETE destroy" do
      it "cannot destroy the requested recipient" do
        recipient = Recipient.create! valid_attributes
        expect {
          delete :destroy, {:id => recipient.to_param}, valid_session
        }.to change(Recipient, :count).by(0)
      end

      it "cannot redirect to the recipients list" do
        recipient = Recipient.create! valid_attributes
        delete :destroy, {:id => recipient.to_param}, valid_session
          expect(response).to redirect_to(login_url)
      end
    end
  end

end
